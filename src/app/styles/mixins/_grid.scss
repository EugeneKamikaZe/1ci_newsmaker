@use "sass:math";

// / Grid system
//
//  Generate semantic grid columns with these mixins.

@mixin make-container() {
    margin-right: auto;
    margin-left: auto;
    padding-right: $grid-gutter-width * 0.5;
    padding-left: $grid-gutter-width * 0.5;
    width: 100%;
}

//  For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
    $max-widths: $container-max-widths,
    $breakpoints: $grid-breakpoints
) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

@mixin make-row() {
    display: flex;
    flex-wrap: wrap;
    margin-right: math.div($grid-gutter-width, -2);
    margin-left: math.div($grid-gutter-width, -2);
}

@mixin make-col-ready() {
    position: relative;
    padding-left: ($grid-gutter-width / 2);

    //  Prevent columns from becoming too narrow when at smaller grid tiers by
    //  always setting `width: 100%;`. This works because we use `flex` values
    //  later on to override this initial width.

    width: 100%;
    min-height: 1px; //  Prevent collapsing  padding-right: ($grid-gutter-width / 2);
}

// stylelint-disable

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage(math.div($size, $columns));

    //  Add a `max-width` to ensure content within each column does not blow out
    //  the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    //  do not appear to require this.

    max-width: percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: math.div($size, $columns);

    margin-left: if($num == 0, 0, percentage($num));
}

//  Container widths
//
//  Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
    //  Single container class with breakpoint max-widths
    .container {
        @include make-container;
        @include make-container-max-widths;
    }

    //  100% wide container at all breakpoints
    .container-fluid {
        @include make-container;
    }

    //  Responsive containers that are 100% wide until a breakpoint
    @each $breakpoint, $container-max-width in $container-max-widths {
        @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
            //  Extend each breakpoint which is smaller or equal to the current breakpoint
            $extend-breakpoint: true;
            %responsive-container-#{$breakpoint} {
                max-width: $container-max-width;
            }

            @each $name, $width in $grid-breakpoints {
                @if $extend-breakpoint {
                    .container#{breakpoint-infix($name, $grid-breakpoints)} {
                        @extend %responsive-container-#{$breakpoint};
                    }

                    //  Once the current breakpoint is reached, stop extending
                    @if $breakpoint == $name {
                        $extend-breakpoint: false;
                    }
                }
            }
        }
        .container-#{$breakpoint} {
            @extend .container-fluid;
        }
    }
}

//  Row
//
//  Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
    .row {
        @include make-row;
    }

    //  Remove the negative margin from default .row, then the horizontal padding
    //  from all immediate children columns (to prevent runaway style inheritance).
    .no-gutters {
        margin-right: 0;
        margin-left: 0;

        > .col,
        > [class*='col-'] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

//  Columns
//
//  Common styles for small and large grid columns

@if $enable-grid-classes {
    @include make-grid-columns;
}
// stylelint-enable
